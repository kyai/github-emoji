package main

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
	"sort"
)

type Emoji struct {
	Code string
	Link string
}

func main() {
	res, err := httpGet("https://api.github.com/emojis")
	if err != nil {
		panic(err)
	}

	var m map[string]string
	if err = json.Unmarshal(res, &m); err != nil {
		panic(err)
	}

	arr := sortMap(m)
	emojis := make([]*Emoji, len(arr))
	for k, v := range arr {
		emojis[k] = &Emoji{
			Code: v,
			Link: m[v],
		}
	}

	if err = writeMD(emojis); err != nil {
		panic(err)
	}

	fmt.Println("Done!")
}

func writeMD(emojis []*Emoji) (err error) {
	filename := "README.md"

	content := "# Github emojis\n"
	content += "Automatically generated by [Github's api](https://api.github.com/emojis)\n\n"

	for _, e := range emojis {
		content += fmt.Sprintf(":%s: `%s`  \n", e.Code, e.Code)
	}

	return ioutil.WriteFile(filename, []byte(content), 0644)
}

func httpGet(url string) (result []byte, err error) {
	resp, err := http.Get(url)
	if err != nil {
		return
	}
	defer resp.Body.Close()
	return ioutil.ReadAll(resp.Body)
}

func sortMap(m map[string]string) (arr []string) {
	for k, _ := range m {
		arr = append(arr, k)
	}
	sort.Strings(arr)
	return
}
